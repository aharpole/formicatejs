// Generated by CoffeeScript 1.6.2
(function() {
  var Editable, Formicate, HiddenInput, Prepare, SwitchToInput, SwitchToSpan, Verify, pluginName,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  HiddenInput = (function() {
    function HiddenInput($span, inputValue) {
      this.build = __bind(this.build, this);      this.span = $span;
      this.inputValue = inputValue;
      this.build(this.span, this.inputValue);
    }

    HiddenInput.prototype.build = function(span, inputValue) {
      var $input;

      this.span = span;
      this.inputValue = inputValue;
      $input = $('<input />').attr('type', 'hidden').attr('value', this.inputValue).attr('name', this.span.attr('name')).attr('id', this.span.attr('name'));
      return this.span.after($input);
    };

    return HiddenInput;

  })();

  window.HiddenInput = HiddenInput;

  SwitchToSpan = (function() {
    function SwitchToSpan($input, $span) {
      this.replace = __bind(this.replace, this);
      this.hiddeninput = __bind(this.hiddeninput, this);
      this.bind = __bind(this.bind, this);
      this.build = __bind(this.build, this);      this.input = $input;
      this.span = $span;
      this.build(this.input, this.span);
    }

    SwitchToSpan.prototype.build = function(input, span) {
      this.input = input;
      this.span = span;
      this.span.empty().html(this.input.val());
      this.hiddeninput(this.span, this.input.val());
      return this.replace(this.input, this.span);
    };

    SwitchToSpan.prototype.bind = function($span) {
      var prepare;

      if ($('#your_form_object')) {
        return prepare = new Prepare($('#your_form_object'));
      }
    };

    SwitchToSpan.prototype.hiddeninput = function($span, $inputValue) {
      return new HiddenInput($span, $inputValue);
    };

    SwitchToSpan.prototype.replace = function(input, span) {
      this.input = input;
      this.span = span;
      this.input.replaceWith(this.span);
      return this.bind(this.span);
    };

    return SwitchToSpan;

  })();

  window.SwitchToSpan = SwitchToSpan;

  Editable = (function() {
    function Editable($input) {
      this.input = $input;
    }

    return Editable;

  })();

  window.Editable = Editable;

  SwitchToInput = (function() {
    function SwitchToInput(span) {
      this.focus = __bind(this.focus, this);
      this.build = __bind(this.build, this);
      this.bind = __bind(this.bind, this);      this.span = $(span);
      this.build(this.span);
    }

    SwitchToInput.prototype.bind = function($input, $span) {
      return $input.on({
        'change': function(e) {
          new Editable($(this));
          return e.preventDefault();
        },
        'blur': function(e) {
          new SwitchToSpan($(this), $span);
          return e.preventDefault();
        }
      });
    };

    SwitchToInput.prototype.build = function(span) {
      var $input;

      this.span = span;
      $input = $('<input />').attr('type', 'text').attr('value', this.span.text());
      this.span.replaceWith($input);
      this.focus($input);
      return this.bind($input, this.span);
    };

    SwitchToInput.prototype.focus = function($input) {
      return $input.focus();
    };

    return SwitchToInput;

  })();

  window.SwitchToInput = SwitchToInput;

  Prepare = (function() {
    function Prepare($form) {
      this.bind = __bind(this.bind, this);
      this.gather = __bind(this.gather, this);
      var _ref;

      if ((_ref = this.form) == null) {
        this.form = $form;
      }
      this.gather();
    }

    Prepare.prototype.gather = function() {
      var _this = this;

      this.waiting = this.form.find('.waiting');
      return this.waiting.each(function(i, e) {
        return _this.bind(e);
      });
    };

    Prepare.prototype.bind = function(waitingSpan) {
      return $(waitingSpan).on('click', function(e) {
        new SwitchToInput(this);
        return e.preventDefault();
      });
    };

    return Prepare;

  })();

  window.Prepare = Prepare;

  Verify = (function() {
    function Verify($admin) {
      this.admin = $admin;
    }

    return Verify;

  })();

  Formicate = (function() {
    function Formicate(formElement, admin) {
      this.prepare = __bind(this.prepare, this);
      this.formElement = formElement;

      this.admin = admin;
      this.prepare(this.formElement);
    }

    Formicate.prototype.verify = function() {
      var verified;

      verified = new Verify(this.admin);
      return new Prepare(this.formElement((function() {
        if (!!verified) {
          throw 'not allowed';
        }
      })()));
    };

    Formicate.prototype.prepare = function(formElement) {
      this.formElement = formElement;
      return new Prepare(this.formElement);
    };

    return Formicate;

  })();

  window.Formicate = Formicate;

  pluginName = 'formicate';

  $.fn[pluginName] = function(options) {
    if (!$.data(this, pluginName)) {
      return $.data(this, pluginName, new Formicate(this, options));
    }
  };

  $(function() {
     if ($('#your_form_object')) {
       return $('#your_form_object').formicate();
     }
  });

}).call(this);